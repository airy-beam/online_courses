from vec import Vec

voting_data = list(open("voting_record_dump109.txt"))

## Task 1

def create_voting_dict():
    """
    Input: None (use voting_data above)
    Output: A dictionary that maps the last name of a senator
            to a list of numbers representing the senator's voting
            record.
    Example: 
        >>> create_voting_dict()['Clinton']
        [-1, 1, 1, 1, 0, 0, -1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, 1]

    This procedure should return a dictionary that maps the last name
    of a senator to a list of numbers representing that senator's
    voting record, using the list of strings from the dump file (strlist). You
    will need to use the built-in procedure int() to convert a string
    representation of an integer (e.g. '1') to the actual integer
    (e.g. 1).

    You can use the split() procedure to split each line of the
    strlist into a list; the first element of the list will be the senator's
    name, the second will be his/her party affiliation (R or D), the
    third will be his/her home state, and the remaining elements of
    the list will be that senator's voting record on a collection of bills.
    A "1" represents a 'yea' vote, a "-1" a 'nay', and a "0" an abstention.

    The lists for each senator should preserve the order listed in voting data. 
    """
    return { str.split()[0]: [int(elem) for elem in str.split()[3:]] for str in voting_data }    

## Task 2

def policy_compare(sen_a, sen_b, voting_dict):
    """
    Input: last names of sen_a and sen_b, and a voting dictionary mapping senator
           names to lists representing their voting records.
    Output: the dot-product (as a number) representing the degree of similarity
            between two senators' voting policies
    Example:
        >>> voting_dict = {'Fox-Epstein':[-1,-1,-1,1],'Ravella':[1,1,1,1]}
        >>> policy_compare('Fox-Epstein','Ravella', voting_dict)
        -2
    """
    voting_a = voting_dict[sen_a]
    voting_b = voting_dict[sen_b]
    sum = 0
    for i in range(len(voting_a)):
        sum += voting_a[i] * voting_b[i]
    return sum

def policy_compare_with_record(sen, record, voting_dict):
    """
    Input: last names of sen_a and sen_b, and a voting dictionary mapping senator
           names to lists representing their voting records.
    Output: the dot-product (as a number) representing the degree of similarity
            between two senators' voting policies
    Example:
        >>> voting_dict = {'Fox-Epstein':[-1,-1,-1,1],'Ravella':[1,1,1,1]}
        >>> policy_compare('Fox-Epstein','Ravella', voting_dict)
        -2
    """
    voting_a = voting_dict[sen]
    voting_b = record
    sum = 0
    for i in range(len(voting_a)):
        sum += voting_a[i] * voting_b[i]
    return sum


## Task 3

def most_similar(sen, voting_dict):
    """
    Input: the last name of a senator, and a dictionary mapping senator names
           to lists representing their voting records.
    Output: the last name of the senator whose political mindset is most
            like the input senator (excluding, of course, the input senator
            him/herself). Resolve ties arbitrarily.
    Example:
        >>> vd = {'Klein': [1,1,1], 'Fox-Epstein': [1,-1,0], 'Ravella': [-1,0,0]}
        >>> most_similar('Klein', vd)
        'Fox-Epstein'

    Note that you can (and are encouraged to) re-use you policy_compare procedure.
    """
    similarity_dict = { policy_compare(sen, senator, voting_dict): senator for senator in voting_dict if senator != sen }
    return similarity_dict[max(similarity_dict)]
    

## Task 4

def least_similar(sen, voting_dict):
    """
    Input: the last name of a senator, and a dictionary mapping senator names
           to lists representing their voting records.
    Output: the last name of the senator whose political mindset is least like the input
            senator.
    Example:
        >>> vd = {'Klein': [1,1,1], 'Fox-Epstein': [1,-1,0], 'Ravella': [-1,0,0]}
        >>> least_similar('Klein', vd)
        'Ravella'
    """
    similarity_dict = { policy_compare(sen, senator, voting_dict): senator for senator in voting_dict if senator != sen }
    return similarity_dict[min(similarity_dict)]
    
    

## Task 5

most_like_chafee    = most_similar('Chafee', create_voting_dict())
least_like_santorum = least_similar('Santorum', create_voting_dict())



# Task 6

def find_average_similarity(sen, sen_set, voting_dict):
    """
    Input: the name of a senator, a set of senator names, and a voting dictionary.
    Output: the average dot-product between sen and those in sen_set.
    Example:
        >>> vd = {'Klein': [1,1,1], 'Fox-Epstein': [1,-1,0], 'Ravella': [-1,0,0]}
        >>> find_average_similarity('Klein', {'Fox-Epstein','Ravella'}, vd)
        -0.5
    """
    similarity_list = [ policy_compare(sen, senator, voting_dict) for senator in sen_set ]
    return sum(similarity_list) / len(similarity_list)

set_of_democrats = { str.split()[0] for str in voting_data if str.split()[1] == 'D' }
voting_dict = create_voting_dict()
average_similarity_dict = { find_average_similarity(senator, set_of_democrats, voting_dict) : senator for senator in voting_dict }
most_average_Democrat = average_similarity_dict[max(average_similarity_dict)] # give the last name (or code that computes the last name)

# Task 7

def find_average_record(sen_set, voting_dict):
    """
    Input: a set of last names, a voting dictionary
    Output: a vector containing the average components of the voting records
            of the senators in the input set
    Example: 
        >>> voting_dict = {'Klein': [-1,0,1], 'Fox-Epstein': [-1,-1,-1], 'Ravella': [0,0,1]}
        >>> find_average_record({'Fox-Epstein','Ravella'}, voting_dict)
        [-0.5, -0.5, 0.0]
    """
    
    l = len(voting_dict[ list(sen_set)[0] ])
    sum_vector = [0] * l
    k = len(sen_set)
    for sen in sen_set:
        for i in range(l):
            sum_vector[i] += voting_dict[sen][i]
    for i in range(l):
        sum_vector[i] = sum_vector[i] / k
    return sum_vector

average_Democrat_record = find_average_record(set_of_democrats, voting_dict)
similarity_dict = { policy_compare_with_record(senator, average_Democrat_record, voting_dict): senator for senator in voting_dict }
most_average_Democrat_2 = similarity_dict[max(similarity_dict)]

# Task 8

def bitter_rivals(voting_dict):
    """
    Input: a dictionary mapping senator names to lists representing
           their voting records
    Output: a tuple containing the two senators who most strongly
            disagree with one another.
    Example: 
        >>> voting_dict = {'Klein': [-1,0,1], 'Fox-Epstein': [-1,-1,-1], 'Ravella': [0,0,1]}
        >>> bitter_rivals(voting_dict)
        ('Fox-Epstein', 'Ravella')
    """
    dissimilarity_dict = { policy_compare(sen1, sen2, voting_dict): ( sen1, sen2 ) for sen1 in voting_dict for sen2 in voting_dict if sen1 != sen2 }
    return dissimilarity_dict[min(dissimilarity_dict)]   

