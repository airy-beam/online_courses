/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package tsp;

/**
 *
 * @author ouwater
 */

import java.util.*;

public class Tsp {

    /**
     * @param args the command line arguments
     */
    
    public static double getShortestHamiltonianCycle(double[][] dist) {
    int n = dist.length;
    double[][] dp = new double[1 << n][n];
    for (double[] d : dp)
      Arrays.fill(d, Integer.MAX_VALUE / 2);
    dp[1][0] = 0;
    for (int mask = 1; mask < 1 << n; mask += 2) {
      for (int i = 1; i < n; i++) {
        if ((mask & 1 << i) != 0) {
          for (int j = 0; j < n; j++) {
            if ((mask & 1 << j) != 0) {
              dp[mask][i] = Math.min(dp[mask][i], dp[mask ^ (1 << i)][j] + dist[j][i]);
            }
          }
        }
      }
    }
    double res = Integer.MAX_VALUE;
    for (int i = 1; i < n; i++) {
      res = Math.min(res, dp[(1 << n) - 1][i] + dist[i][0]);
    }

    // reconstruct path
    int cur = (1 << n) - 1;
    int[] order = new int[n];
    int last = 0;
    for (int i = n - 1; i >= 1; i--) {
      int bj = -1;
      for (int j = 1; j < n; j++) {
        if ((cur & 1 << j) != 0 && (bj == -1 || dp[cur][bj] + dist[bj][last] > dp[cur][j] + dist[j][last])) {
          bj = j;
        }
      }
      order[i] = bj;
      cur ^= 1 << bj;
      last = bj;
    }
    System.out.println(Arrays.toString(order));
    return res;
  }
    
    public static void main(String[] args) {
        // TODO code application logic here
        // dist: matrix of distances c[i][j]
        double[][] dist = { { 0.0, 61.8243479545074, 117.553477192297, 161.798702096154, 190.216324220609, 200.0, 190.216324220609, 161.798702096154, 117.553477192297, 61.8243479545074 } , 
                            { 61.8243479545074, 0.0, 61.7874582743132, 117.545438022919, 161.8, 190.216324220609, 200.022498734517, 190.222107022291, 161.818447650446, 117.6 } , 
                            { 117.553477192297, 61.7874582743132, 0.0, 61.8, 117.545438022919, 161.798702096154, 190.222107022291, 199.988199651879, 190.2, 161.818447650446 } , 
                            { 161.798702096154, 117.545438022919, 61.8, 0.0, 61.7874582743132, 117.553477192297, 161.818447650446, 190.2, 199.988199651879, 190.222107022291 } , 
                            { 190.216324220609, 161.8, 117.545438022919, 61.7874582743132, 0.0, 61.8243479545074, 117.6, 161.818447650446, 190.222107022291, 200.022498734517 } , 
                            { 200.0, 190.216324220609, 161.798702096154, 117.553477192297, 61.8243479545074, 0.0, 61.8243479545074, 117.553477192297, 161.798702096154, 190.216324220609 } , 
                            { 190.216324220609, 200.022498734517, 190.222107022291, 161.818447650446, 117.6, 61.8243479545074, 0.0, 61.7874582743132, 117.545438022919, 161.8 } , 
                            { 161.798702096154, 190.222107022291, 199.988199651879, 190.2, 161.818447650446, 117.553477192297, 61.7874582743132, 0.0, 61.8, 117.545438022919 } , 
                            { 117.553477192297, 161.818447650446, 190.2, 199.988199651879, 190.222107022291, 161.798702096154, 117.545438022919, 61.8, 0.0, 61.7874582743132 } , 
                            { 61.8243479545074, 117.6, 161.818447650446, 190.222107022291, 200.022498734517, 190.216324220609, 161.8, 117.545438022919, 61.7874582743132, 0.0 } 
                            }; 
        
        System.out.println(getShortestHamiltonianCycle(dist));
    }
}
